"""
CISC7016 Advanced Topics in Computer Science
Skeleton code is generated by ChatGPT: https://chat.openai.com
Modified by Yumu Xie
"""

# -*- coding: utf-8 -*-

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt

def main():
    # data augmentation and normalization (add cutout)
    transform_train = transforms.Compose([
        transforms.RandomCrop(32, padding=4),
        transforms.RandomHorizontalFlip(),
        transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.2),
        transforms.ToTensor(),
        transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
        transforms.RandomErasing(p=0.5, scale=(0.02, 0.2), ratio=(0.3, 3.3), value=0) # cutout layer
    ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
    ])

    # load CIFAR-10 dataset
    trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)
    trainloader = torch.utils.data.DataLoader(trainset, batch_size=4, shuffle=True)

    testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)
    testloader = torch.utils.data.DataLoader(testset, batch_size=4, shuffle=False)

    # load pre-trained ResNet-50 model
    model = torchvision.models.resnet50(pretrained=True)

    # set the last fully connected layer
    model.fc = nn.Sequential(
        nn.Dropout(0.5), # add dropout layer to avoid overfitting
        nn.Linear(model.fc.in_features, 10)
    )

    # unfreeze layer 3 and layer 4
    for name, param in model.named_parameters():
        if 'layer3' in name or 'layer4' in name:
            param.requires_grad = True
        else:
            param.requires_grad = False

    # set different learning rate for various layers 
    # (pre-trained layers have lower learning rate, while new layers have larger learning rate)
    optimizer = optim.SGD([
        {'params': model.layer3.parameters(), 'lr': 0.001},
        {'params': model.layer4.parameters(), 'lr': 0.001},
        {'params': model.fc.parameters(), 'lr': 0.01}
    ], momentum=0.9, weight_decay=5e-4)

    criterion = nn.CrossEntropyLoss()

    scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.1)

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    print(f"Using {device} device")

    model = model.to(device)

    print(model) # print out the structure of model

    training_loss_list = []
    testing_loss_list = []

    num_epochs = 36
    for epoch in range(num_epochs):
        model.train()
        training_loss = 0.0
        # correct = 0
        # total = 0
        for inputs, labels in trainloader:
            inputs, labels = inputs.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            training_loss += loss.item()
            # _, predicted = outputs.max(1)
            # total += labels.size(0)
            # correct += (predicted == labels).sum().item()
        epoch_train_loss = training_loss / len(trainloader)
        # epoch_acc = correct / total * 100
        training_loss_list.append(epoch_train_loss)
        print(f"epoch [{epoch+1}/{num_epochs}], training loss: {epoch_train_loss:.4f}")
        # print(f"Epoch [{epoch+1}/{num_epochs}], Loss: {epoch_loss:.4f}, Accuracy: {epoch_acc:.2f}%")
        scheduler.step()
        model.eval()
        testing_loss = 0.0
        for inputs, labels in testloader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            testing_loss += loss.item()
        epoch_test_loss = testing_loss / len(testloader)
        testing_loss_list.append(epoch_test_loss)
        print(f"epoch [{epoch+1}/{num_epochs}], testing loss: {epoch_test_loss:.4f}")

    # save model
    PATH = './path/cifar_transfer_learning.pth'
    torch.save(model.state_dict(), PATH)

    # load weight
    model = model.to(device)
    model.load_state_dict(torch.load(PATH, weights_only=True))

    correct = 0
    total = 0

    with torch.no_grad():
        for inputs, labels in testloader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            _, predicted = outputs.max(1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    print(f'Accuracy of the network on the 10000 test images: {100 * correct / total} %')

    classes = ('plane', 'car', 'bird', 'cat', 'deer', 
                'dog', 'frog', 'horse', 'ship', 'truck') # 10 classifications = 10 labels

    # prepare to count predictions for each class
    correct_pred = {classname: 0 for classname in classes}
    total_pred = {classname: 0 for classname in classes}

    # again no gradients needed
    with torch.no_grad():
        # for _, data in enumerate(testloader, 0):
        for data in testloader:
            inputs, labels = data[0].to(device), data[1].to(device)
            outputs = model(inputs)
            _, predictions = torch.max(outputs, 1)
            # collect the correct predictions for each class
            for label, prediction in zip(labels, predictions):
                if label == prediction:
                    correct_pred[classes[label]] += 1
                total_pred[classes[label]] += 1

    # print accuracy for each class
    for classname, correct_count in correct_pred.items():
        accuracy = 100 * float(correct_count) / total_pred[classname]
        print(f'Accuracy for class: {classname:5s} is {accuracy:.1f} %')

    # load epoch round from 1 to 36 (from 0 to 35)
        x = []
        for i in range(36):
            x.append(i + 1)

        # transfer learning
        y1 = training_loss_list
        y2 = testing_loss_list
        # add lines
        plt.plot(x, y1, marker='o', linestyle='-', color='b', label='train loss')
        plt.plot(x, y2, marker='s', linestyle='--', color='r', label='test loss')
        # add labels and title
        plt.xlabel('epoch')
        plt.ylabel('loss')
        plt.title('Loss of Transfer Learning')
        # add grid and legend
        plt.grid(True)
        plt.legend()
        # save the plot as an image file
        plt.savefig('transfer_learning_loss.png') # save as PNG
        plt.savefig('transfer_learning_loss.pdf') # to save as PDF, use this instead
        # show the plot
        # plt.show()

if __name__ == "__main__":
    main()
